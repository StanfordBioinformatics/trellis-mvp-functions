import os
import iso8601
import datetime

def get_kind_patterns():

    match_patterns = {
                "Sample:WGS_9000": ["SHIP\\d+/"], 
                "Sample_tar": [".*/SHIP\\d+\\.tar$"], 
                "Bam": [".*/Alignments/.*\\.bam$"], 
                "Bai": [".*/Alignments/.*bam\\.bai$"], 
                "Fastq": [".*/FASTQ/.*\\.fastq\\.gz"], 
                "Vcf": [".*/Variants/.*\\.vcf\\.gz$"], 
                "Cnv_report": [
                               ".*/Annotated_CopyNumber_Reports/tsv/.*\\.tsv", 
                               ".*/Variants/.*\\.genomeCNV\\.gff"], 
                "Small_variant_report": [".*/Annotated_SmallVariant_Reports/.*/tsv/.*\\.tsv"], 
                "Personalis_qc": [".*/QC_REPORT/.*_statistics\\.tsv"], 
                "Bed": [".*/BED/.*\\.bed$"] 
    }

    return(match_patterns)

def get_seconds_from_epoch(datetime_obj):
    """Get datetime as total seconds from epoch.

    Provides datetime in easily sortable format
    """
    return (datetime_obj - datetime(1970, 1, 1, tzinfo=pytz.UTC)).total_seconds()

def search_string(string, pattern, group, req_type):
    # kwargs: [pattern, string, group, req_type]
    """Calls regex search function using specified values. 

    Args:
        pattern (str): Pattern to search for. 
        string (str): String that will be searched. 
        group (int): Index of matching group to be returned.
        req_type (type): Type of value that should be returned.

    Returns:
        value (req_type): (n)th element of group elements, where 
                          n==group and type==req_type.

    """
    match = re.search(pattern, string)
    if not match:
        # Throw exception
        print("Error: no match found")
        pdb.set_trace()
    else:
        match_value = match.group(group)

    typed_value = req_type(match_value)

    return(typed_value)

def split_string(string, delimiter, index, req_type):
    """Calls split function on string.

    Args: 
        string (str): String that will be split.
        delimiter (str): Delimiter that will be used to split string. 
        index (int): Index of elements generated by split, that should 
                     be returned. 
        req_type (type): Type of value that should be returned.

    Returns:
        value (req_type): The (n)th element of the split elements, where
                          n==index and type==req_type.
    """
    value = string.split(delimiter)[index]
    typed_value = req_type(value)

    return(typed_value)

def get_date_object(date_string):
    return iso8601.parse_date(date_string)

class Sample:

    def __init__(self, event, context):

        self.labels = ['Sample', 'WGS_9000', 'Test']

        # First element == parent directory == sample name
        path = event['name']
        sample_name = path.split('/')[0]

        self.db_dict = {
                        'sample': sample_name, 
                        'labels': labels
                       }

    def get_db_dict(self):

        return(self.db_dict)

class Bam:

    def __init__(self, event, context):

        labels = ['Bam', 'Test']

        path = event['name']
        basename = os.path.basename(path)
        
        elements = basename.split('.')
        name = elements[0]

        sample_name = path.split('/')[0]
        chromosome = split_string(
                                  string = name, 
                                  delimiter = "_", 
                                  index = 2, 
                                  req_type = str)

        # Copy GCS metadata to database
        self.db_dict = event

        self.db_dict['sample'] = sample_name
        self.db_dict['chromosome'] = chromosome
        self.db_dict['labels'] = labels 

        # Overwrite existing name value
        self.db_dict['name'] = name
        self.db_dict['path'] = path
        self.db_dict['basename'] = basename

    def get_db_dict(self):

        return(self.db_dict)

class NodeKinds:

    def __init__(self):
        """Use to determine which kind of database node should be created.
        """
        self.match_patterns = {
                               "Sample": ["SHIP\\d+/"], 
                               "Sample_tar": [".*/SHIP\\d+\\.tar$"], 
                               "Bam": [".*/Alignments/.*\\.bam$"], 
                               "Bai": [".*/Alignments/.*bam\\.bai$"], 
                               "Fastq": [".*/FASTQ/.*\\.fastq\\.gz"], 
                               "Vcf": [".*/Variants/.*\\.vcf\\.gz$"], 
                               "Cnv_report": [
                                              ".*/Annotated_CopyNumber_Reports/tsv/.*\\.tsv", 
                                              ".*/Variants/.*\\.genomeCNV\\.gff"], 
                               "Small_variant_report": [".*/Annotated_SmallVariant_Reports/.*/tsv/.*\\.tsv"], 
                               "Personalis_qc": [".*/QC_REPORT/.*_statistics\\.tsv"], 
                               "Bed": [".*/BED/.*\\.bed$"] 
        }

        self.kind_classes = {
                             'Sample': Sample, 
                             'Bam': Bam
        }

    def get_match_patterns(self):
        return self.match_patterns

    def get_class(self, name):
        """Return class whose name matches input string.
        """
        return self.kind_classes[name]
